module controlunit(
 input [31:0] instruction,
 output reg [3:0] alu_op,
 output reg mem_write,
 output reg mem_read,
 output reg reg_write,
 output reg [1:0] mem_to_reg
);

always@(instruction) begin
 // Decode instruction
 case(instruction[6:0])
   6'b0110011: begin // ADD instruction
     alu_op <= 4'b0010;
     mem_write <= 0;
     mem_read <= 0;
     reg_write <= 1;
     mem_to_reg <= 2'b00;
   end
   6'b0010011: begin // ADDI instruction
     alu_op <= 4'b0010;
     mem_write <= 0;
     mem_read <= 0;
     reg_write <= 1;
     mem_to_reg <= 2'b00;
   end
   6'b0111011: begin // MUL instruction
     alu_op <= 4'b0100;
     mem_write <= 0;
     mem_read <= 0;
     reg_write <= 1;
     mem_to_reg <= 2'b00;
   end
   6'b0001011: begin // MULI instruction
     alu_op <= 4'b0100;
     mem_write <= 0;
     mem_read <= 0;
     reg_write <= 1;
     mem_to_reg <= 2'b00;
   end
   // ... other instructions
 endcase
end

endmodule
