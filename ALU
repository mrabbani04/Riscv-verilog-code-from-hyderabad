

module alu(
input [31:0] a,
  input [31:0] b,
  input [3:0] op,
  output reg [31:0] result,
  output reg zero_flag
);

always @* begin
  case(op)
    4'b0000: result <= a + b;
    4'b0001: result <= a - b;
    4'b0010: result <= a & b;
    4'b0011: result <= a | b;
    4'b0100: result <= a ^ b;
    4'b0101: result <= a >> b;
    4'b0110: result <= a << b;
    4'b0111: result <= a >>> b;
    4'b1000: result <= a == b;
    4'b1001: result <= a != b;
    4'b1010: result <= a > b;
    4'b1011: result <= a < b;
    4'b1100: result <= a >= b;
    4'b1101: result <= a <= b;
    default: result <= 32'b0;
  endcase
end

always @* begin
  if(result == 0) 
    zero_flag <= 1;
  else 
    zero_flag <= 0;
end

endmodule
