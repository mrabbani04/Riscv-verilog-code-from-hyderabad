

module register(
input clk, reset,
 input [4:0] write_reg,
 input [31:0] write_data,
 input reg_write,
 input [4:0] read_reg_1,
 input [4:0] read_reg_2,
 output reg [31:0] read_data_1,
 output reg [31:0] read_data_2
);
integer i;
reg [31:0] register_file[0:16];

always @(posedge clk or negedge reset) begin
  if(reset) begin
    for (i = 0; i < 16; i=i+1)
      register_file[i] <= 0;
  end else if(reg_write) begin
   register_file[write_reg] <= write_data;
  end
end

always @(*) begin
   read_data_1 <= register_file[read_reg_1];
   read_data_2 <= register_file[read_reg_2];
end

endmodule
 
