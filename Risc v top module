module riscvtop(
  input clk,
  input reset,
  output reg [31:0] register,
  output reg [31:0] pc,
  output reg [31:0] instruction,
  output reg [31:0] result,
  output reg [31:0] write_data,
  output reg [4:0] write_reg,
  output reg mem_write,
  output reg mem_read
);

wire [31:0] address;
wire [31:0] pc_out;
wire [31:0] read_reg_1;
wire [31:0] read_reg_2;
wire [4:0] reg_write;
wire [6:0] op;
wire [2:0] funct3;
wire [6:0] funct7;
wire [31:0] sign_extended_immediate;

instructionmem instruction_memory_inst(.clk(clk), .address(pc), .instruction(instruction));
pc program_counter_inst(.clk(clk), .next_pc(next_pc), .pc(pc));
controlunit control_unit_inst(.opcode(opcode), .funct3(funct3), .funct7(funct7), .mem_read(mem_read), .mem_write(mem_write), .write_reg(write_reg), .register_write(register_write), .alu_src(alu_src), .alu_op(alu_op));
register register_file_inst(.clk(clk), .write_data(write_data), .write_reg(write_reg), .read_reg_1(rs1), .read_reg_2(rs2), .write_enable(register_write), .read_data_1(register[rs1]), .read_data_2(register[rs2]), .write_address(write_reg));
datamem data_memory_inst(.clk(clk), .address(alu_result), .write_data(register[rd]), .mem_write(mem_write), .mem_read(mem_read), .read_data(memory_result));

alu alu_inst(.funct3(funct3), .funct7(funct7), .input_1(rs1), .input_2(rs2), .immediate(sign_extended_immediate), .op(alu_op), .result(alu_result));

// ...

always@(posedge clk) begin
  if(reset) begin
    pc <= 0;
  end else begin
    pc <= next_pc;
  end
end

endmodule
